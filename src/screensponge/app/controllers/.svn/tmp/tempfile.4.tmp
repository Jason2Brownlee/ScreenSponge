class ShowsController < ApplicationController

  before_filter :login_required, :except => [:index, :show, :members]
  before_filter :load_user, :except => [:index, :related, :quickadd]

  def add
    #TODO - need some logic to prevent user from adding existing shows
    show = Show.find(params[:id])
    @c_show = show.user_clone(current_user)
    #@c_show.intentions.build
    respond_to do |format|
      if @c_show.save!
        ShowActivity.new_show(@show, current_user)
        flash[:notice] = 'Show was successfully added.'
        format.html { redirect_to([current_user, @c_show]) }
        format.xml  { render :xml => @c_show, :status => :created, :location => @c_show }
      else
        flash[:notice] = 'Problem occurred adding show'
        format.html { render :action => "new" }
        format.xml  { render :xml => @c_show.errors, :status => :unprocessable_entity }
      end
    end   
  end
  
  def quickadd
    #TODO - need some logic to prevent user from adding existing shows
    @show = current_user.shows.build(params[:show])
    # if no global-id set snap the show to the first found show after performing a related query
    if (@show.global_id == nil or @show.global_id.blank?)
      name = @show.name
      related_shows = Show.top_related(name)
      if not related_shows.empty?
        @show = related_shows.first.user_clone(current_user)
        @show.name = name
      end
    end

    respond_to do |format|
<<<<<<< .mine
      if @show.save
        ShowActivity.new_show(@show, current_user)
        flash[:notice] = 'Shows was successfully added.'
=======
      if @show.save!
        flash[:notice] = "Show '" + @show.name + "' was successfully added."
>>>>>>> .r162
        format.html { redirect_to(user_shows_url(current_user)) }
        format.xml  { render :xml => @show, :status => :created, :location => @show }
      else
        flash[:error] = 'Problem occurred adding show'
        format.html { redirect_to([current_user, @show]) }
        format.xml  { render :xml => @show.errors, :status => :unprocessable_entity }
      end
    end
  end

  # GET /shows/search
  # GET /shows/search.xml
  def search
    @query=params[:query]
    if @query == nil
      @query = ''
    end
    
    per_page = 10
    @shows = Show.find_with_ferret(@query,  
                                   :page => params[:page], 
                                   :per_page => per_page)
    #                              :lazy => [:title]
    respond_to do |format|
      format.html #
      format.xml  { render :xml => @shows }
    end
  end
  
  def browse
    @shows = Show.paginate(:all, :page => params[:page])
    respond_to do |format|
      format.html #
      format.xml  { render :xml => @shows }
    end
  end
  
  def related
    @query=params[:query]
    @shows = Show.top_related_for_user(@query, current_user)
    
    respond_to do |format|
      format.html { render :action => "new"} #{ render(new_user_show_path(current_user)) }\
      format.xml  { render :xml => @shows.to_xml(:only => [:name, :count, :global_id, :user_has]) }
      format.js   { render :json => @shows.to_json(:only => [:name, :count, :global_id, :user_has]) }
    end
  end
  
  def members
    @show = @user.shows.find(params[:id])
    @members = @show.group_members(100)
  end
  
  # GET /shows
  # GET /shows.xml
  def index
    if params[:user_id].nil?
      redirect_to :controller => 'groups', :action => 'index'
      return
    else
      load_user
    end

    @sort = params[:order]
    order = order_by
    if order.blank?
      order ="created_at DESC"
      @sort = "created_at"
      @direction = "DESC"
    end  
    if params[:type] == nil || params[:type] == 'all'
      @selected_type = 'all'
      @shows = @user.shows.paginate(:all, :page => params[:page], :order => order)
    else
      @selected_type = params[:type]
      @shows = Show.find_by_user_and_type(current_user, params[:type], params[:page], order)
    end
    
  #    if params[:type] != nil
  #      conditions = ['annotations.type = ? and annotations.entry = ?', 'Type', params[:type]]
  #    end
  #    if params[:type] = 'all'
  #      conditions = nil
  #    end
  #    @shows = @user.shows.paginate(:all, 
  #                                  :joins => :annotations,
  #                                  :conditions => conditions,
  #                                  :page => params[:page], 
  #                                  :order => 'created_at DESC')
    #@shows = @user.shows
    respond_to do |format|
      format.html # index.html.erb
      format.xml  { render :xml => @shows }
    end
  end

  # GET /shows/1
  # GET /shows/1.xml
  def show
    @show = @user.shows.find(params[:id])
    @total_group_members = @show.group_members.size
    @plot = @show.plot
    @pictures = @show.pictures.empty? ? @show.group_pictures(2) : @show.pictures(:limit=>2)
    @review = @show.reviews.empty? ? @show.group_reviews(1) : @show.reviews(:first)
    @intention = @show.intentions(:first)
    @type = @show.types(:first)
    @cover = @show.cover
    
    @message = @show.messages.build
    
    respond_to do |format|
      format.html # show.html.erb
      format.xml  { render :xml => @show }
    end
  end


  # GET /shows/new
  # GET /shows/new.xml
  def new
    @show = current_user.shows.build
    @intention = @show.intentions.build
    @type = @show.types.build
    
    respond_to do |format|
      format.html # new.html.erb
      format.xml  { render :xml => @show }
    end
  end

  # GET /shows/1/edit
  def edit
    @show = current_user.shows.find(params[:id])
  end

  # POST /shows
  # POST /shows.xml
  def create
    @show = current_user.shows.new(params[:show])
    @intention = @show.intentions.build(params[:intention])
    @type = @show.types.build(params[:type])

    respond_to do |format|
      if @show.save
        ShowActivity.new_show(@show, current_user)
        flash[:notice] = 'Shows was successfully created.'
        format.html { redirect_to([current_user, @show]) }
        format.xml  { render :xml => @show, :status => :created, :location => @show }
      else
        format.html { render :action => "new" }
        format.xml  { render :xml => @show.errors, :status => :unprocessable_entity }
      end
    end
  end

  # PUT /shows/1
  # PUT /shows/1.xml
  def update
    @show = current_user.shows.find(params[:id])

    respond_to do |format|
      if @show.update_attributes(params[:show])
        ShowActivity.update_show(@show, current_user)
        flash[:notice] = 'Shows was successfully updated.'
        format.html { redirect_to([current_user, @show]) }
        format.xml  { head :ok }
      else
        format.html { render :action => "edit" }
        format.xml  { render :xml => @show.errors, :status => :unprocessable_entity }
      end
    end
  end

  # DELETE /shows/1
  # DELETE /shows/1.xml
  def destroy
    @show = current_user.shows.find(params[:id])
    name = @show.name
    @show.destroy

    respond_to do |format|
      flash[:notice] = "Show '" + name + "' was deleted."
      format.html { redirect_to(user_shows_url(current_user)) }
      format.xml  { head :ok }
      format.js { render_text "" }
    end
  end
  
  private
  
  def load_user
    @user = find_user(params[:user_id])
    @is_self = (logged_in? and current_user==@user) ? true : false
  end
  
end
