class ShowsController < ApplicationController

  before_filter :login_required, :except => [:index, :show, :members,:nav_shows]
  before_filter :load_user, :except => [:index, :related, :quickadd]
 


  def add
    #TODO - need some logic to prevent user from adding existing shows
    show = Show.find(params[:id])
    @c_show = show.user_clone(current_user)
    #@c_show.intentions.build
    respond_to do |format|
      if @c_show.save!
        ShowActivity.new_show(@c_show, current_user)
        flash[:notice] = 'Show was successfully added.'
        format.html { redirect_to([current_user, @c_show]) }
        format.xml  { render :xml => @c_show, :status => :created, :location => @c_show }
      else
        flash[:notice] = 'Problem occurred adding show'
        format.html { render :action => "new" }
        format.xml  { render :xml => @c_show.errors, :status => :unprocessable_entity }
      end
    end   
  end
  
  def seen
    show = Show.find(params[:id])
    @show = show.user_clone(current_user)
    @show.seen
    respond_to do |format|
      if @show.save!
        ShowActivity.new_show(@show, current_user)
        flash[:notice] = "Show was successfully added as <b>seen</b>. <a href=\"" + user_show_url(current_user, @show) + "\">View '" + @show.name + "'</a>"
        format.html { redirect_to(user_shows_url(current_user)) }
        format.xml  { render :xml => @show, :status => :created, :location => @show }
      else
        fl   ash[:notice] = 'Problem occurred adding show'
        format.html { render :action => "new" }
        format.xml  { render :xml => @show.errors, :status => :unprocessable_entity }
      end
    end
  end
  
  def want
    show = Show.find(params[:id])
    @show = show.user_clone(current_user)
    @show.want
    respond_to do |format|
      if @show.save!
        ShowActivity.new_show(@show, current_user)
        flash[:notice] = "Show was successfully added as <b>want</b>. <a href=\"" + user_show_url(current_user, @show) + "\">View '" + @show.name + "'</a>"
        format.html { redirect_to(user_shows_url(current_user)) }
        format.xml  { render :xml => @show, :status => :created, :location => @show }
      else
        flash[:notice] = 'Problem occurred adding show'
        format.html { render :action => "new" }
        format.xml  { render :xml => @show.errors, :status => :unprocessable_entity }
      end
    end
  end

  def have
    show = Show.find(params[:id])
    @show = show.user_clone(current_user)
    @show.have
    respond_to do |format|
      if @show.save!
        ShowActivity.new_show(@show, current_user)
        flash[:notice] = "Show was successfully added as <b>have</b>. <a href=\"" + user_show_url(current_user, @show) + "\">View '" + @show.name + "'</a>"
        format.html { redirect_to(user_shows_url(current_user)) }
        format.xml  { render :xml => @show, :status => :created, :location => @show }
      else
        flash[:notice] = 'Problem occurred adding show'
        format.html { render :action => "new" }
        format.xml  { render :xml => @show.errors, :status => :unprocessable_entity }
      end
    end
  end
  
  def quickadd
    #TODO - need some logic to prevent user from adding existing shows
    user = current_user
    @show = user.shows.build(params[:show])
    # if no global-id set snap the show to the first found show after performing a related query
    if (@show.global_id == nil or @show.global_id.blank?)
      name = @show.name
      related_shows = Show.top_related(name)
      if not related_shows.empty?
        @show = related_shows.first.user_clone(current_user)
        @show.name = name
      end
    end

    respond_to do |format|
      if (user.shows.find(:first, :conditions => { :global_id => @show.global_id } ) ).nil?
        if @show.save!
          ShowActivity.new_show(@show, current_user)
          flash[:notice] = "Show '" + @show.name + "' was successfully added."
          format.html { redirect_to(user_shows_url(current_user)) }
          format.xml  { render :xml => @show, :status => :created, :location => @show }
        else
          flash[:error] = 'Problem occurred adding show'
          format.html { redirect_to([current_user, @show]) }
          format.xml  { render :xml => @show.errors, :status => :unprocessable_entity }
        end
      else
        flash[:notice] = "Show '" + @show.name + "' is already in your collection"
        format.html { redirect_to([current_user, @show]) }
        format.xml  { render :xml => 'Show already exists', :status => :unprocessable_entity }
      end
    end
  end

  # GET /shows/search
  # GET /shows/search.xml
  def search
    @query=params[:query]
    if @query == nil
      @query = ''
    end
    
    per_page = 10
    @shows = Show.find_with_ferret(@query,  
                                   :page => params[:page], 
                                   :per_page => per_page)
    #                              :lazy => [:title]
    respond_to do |format|
      format.html #
      format.xml  { render :xml => @shows }
    end
  end
  
  def browse
    @shows = Show.paginate(:all, :page => params[:page])
    respond_to do |format|
      format.html #
      format.xml  { render :xml => @shows }
    end
  end
  
  def related
    @query=params[:query]
    @shows = Show.top_related_for_user(@query, current_user)
    
    respond_to do |format|
      format.html { render :action => "new"} #{ render(new_user_show_path(current_user)) }\
      format.xml  { render :xml => @shows.to_xml(:only => [:name, :count, :global_id, :user_has]) }
      format.js   { render :json => @shows.to_json(:only => [:name, :count, :global_id, :user_has]) }
    end
  end
  
  def members
    @show = @user.shows.find(params[:id])
    @members = @show.group_members(100)
  end
  
  # GET /shows
  # GET /shows.xml
  def index
    if params[:user_id].nil?
      if logged_in?
        redirect_to user_shows_path(current_user)
      else
        redirect_to :controller => 'groups', :action => 'index'
      end
      return
    else
      load_user
    end
    
    @sort = params[:order]
    order = order_by
    if order.blank?
      order ="created_at DESC"
      @sort = "created_at"
      @direction = "DESC"
    end 
    
    type = params[:type]
    intention = params[:intention]
    @selected_type = type
    @selected_intention = intention
    page = params[:page]
    if (intention.nil? or intention == 'all')
      @selected_intention = 'all'
      intention = nil 
    end
    if (type.nil? or type == 'all' or !intention.nil?)
      @selected_type = 'all'
      type = nil
    end
    
    if intention.nil? and type.nil?
      @shows = @user.shows.paginate(:all, :page => page, :order => order)
    elsif !intention.nil?
      @shows = Show.find_by_user_and_annotation(current_user, 'intention', intention, order, page)
    else
      @shows = Show.find_by_user_and_annotation(current_user, 'type', type, order, page)
    end
    
    if !@user.shows.empty?
      show_gids = @user.shows.map { |i| "'"+ i['global_id']+"'" }
      @show_activity = Activity.find(:all, :limit=>20, :order=>"activities.created_at DESC",
        :conditions=>"shows.global_id in (#{show_gids.join(',')})", 
        :include=>:show)
    end
    
    respond_to do |format|
      format.html # index.html.erb
      format.xml  { render :xml => @shows }
    end
  end
  
  
  def add_parent
    @show = @user.shows.find(params[:id])
    
    if request.put?
      if @show.update_attributes(params[:show])
        flash[:notice] = 'Shows was successfully created.'
        redirect_to([@user, @show])
      else
        render :action => "add_parent"
      end
    else
      @shows = current_user.shows.find(:all, :order=>"name ASC")
      # never select self
      @shows.delete(@show)
      # never select things already in the hierarchy beyond the current parent
      p = @show.parent
      while(!p.nil?) do
        if !p.parent.nil?
          @shows.delete(p.parent)
        end
        p = p.parent
      end
    end
  end

  # GET /shows/1
  # GET /shows/1.xml
  def show
    @show = @user.shows.find(params[:id])
    @total_group_members = @show.count_group_members
    @plot = @show.plot
    @pictures = @show.group_pictures(3)
    @review = @show.reviews.empty? ? @show.group_reviews(1) : @show.reviews(:first)
    @intention = @show.intentions(:first)
    @type = @show.types(:first)
    @cover = @show.cover
    @trailer = @show.trailer
    
    @message = @show.messages.build
    
    respond_to do |format|
      format.html # show.html.erb
      format.xml  { render :xml => @show }
    end
  end


  # GET /shows/new
  # GET /shows/new.xml
  def new
    @show = current_user.shows.build
    @intention = @show.intentions.build
    @type = @show.types.build
    
    respond_to do |format|
      format.html # new.html.erb
      format.xml  { render :xml => @show }
    end
  end

  # GET /shows/1/edit
  def edit
    @show = current_user.shows.find(params[:id])
  end

  # POST /shows
  # POST /shows.xml
  def create
    @show = current_user.shows.new(params[:show])
    @intention = @show.intentions.build(params[:intention])
    @type = @show.types.build(params[:type])

    respond_to do |format|
      if @show.save
        ShowActivity.new_show(@show, current_user)
        flash[:notice] = 'Shows was successfully created.'
        format.html { redirect_to([current_user, @show]) }
        format.xml  { render :xml => @show, :status => :created, :location => @show }
      else
        format.html { render :action => "new" }
        format.xml  { render :xml => @show.errors, :status => :unprocessable_entity }
      end
    end
  end

  # PUT /shows/1
  # PUT /shows/1.xml
  def update
    @show = current_user.shows.find(params[:id])

    respond_to do |format|
      if @show.update_attributes(params[:show])
        ShowActivity.update_show(@show, current_user)
        flash[:notice] = 'Shows was successfully updated.'
        format.html { redirect_to([current_user, @show]) }
        format.xml  { head :ok }
      else
        format.html { render :action => "edit" }
        format.xml  { render :xml => @show.errors, :status => :unprocessable_entity }
      end
    end
  end

  # DELETE /shows/1
  # DELETE /shows/1.xml
  def destroy
    @show = current_user.shows.find(params[:id])
    name = @show.name
    @show.destroy

    respond_to do |format|
      flash[:notice] = "Show '" + name + "' was deleted."
      format.html { redirect_to(user_shows_url(current_user)) }
      format.xml  { head :ok }
      format.js { render_text "" }
    end
  end
  
  private
  
  def load_user
    @user = find_user(params[:user_id])
    @is_self = (logged_in? and current_user==@user) ? true : false
  end
  
end
