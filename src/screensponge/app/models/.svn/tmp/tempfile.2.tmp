class Show < ActiveRecord::Base
  
  # ferret integration
  # acts_as_ferret :fields => { :name => {:store => :yes, :boost => 2}, 
  #                               :global_id => {:store => :yes, 
  #                                              :index => :untokenized},
  #                               :user => {}
  #                             }

  # validation
  validates_presence_of :name, :user
  
  # relationships
  has_many :annotations, :dependent => :destroy
  belongs_to :user

  before_save :make_default_global_id
  
  
  # show annotations
  has_many :messages, :order=>"created_at DESC"
  has_many :reviews, :order=>"created_at DESC"
  has_many :plots, :order=>"created_at DESC"
  has_many :pictures, :order=>"created_at DESC"
  has_many :intentions, :order=>"created_at DESC"
  has_many :types, :order=>"created_at DESC"
  has_many :covers, :order=>"created_at DESC"
  
  def plot
    # why doesn't this work
    # self.plots(:first).entry || self.group_plots(1).entry || "no synopsis available"
    
    # hack to get it working
    rs = Annotation.find(:first, :conditions=>["show_id=? and type=?",self.id,"Plot"])
    if rs.nil?
      rs = Annotation.find(:first, :conditions=>["show_id=? and type=? and shows.global_id=?",self.id,"Plot",self.global_id], :include=>:show)
      if rs.nil?
        p = "no synopsis available"
      else
        p = rs.entry
      end
    else
      p = rs.entry
    end
    
    return p
  end

  # group annotations
  def group_annotations(type, limit=nil)
    return Annotation.find(:all, 
      :conditions => ["shows.global_id=? and type=?", self.global_id, type], 
      :include => :show, :limit=>limit, :order=>"annotations.created_at DESC")
  end

  def group_messages(limit=nil)
    return group_annotations("Message", limit)
  end
  
  def group_reviews(limit=nil)
    return group_annotations("Review", limit)
  end
  
  def group_plots(limit=nil)
    # TODO - random plot
    return group_annotations("Plot", limit)
  end
  
  def group_pictures(limit=nil)
    # TODO - random pic
    return group_annotations("Picture", limit)
  end
  
  def group_intentions(limit=nil)
    return group_annotations("Intention", limit)
  end
  
  def group_types(limit=nil)
    return group_annotations("Type", limit)
  end
  
  def group_covers(limit=nil)
    return group_annotations("Cover", limit)
  end
  
  
  
  
  def connected_shows
    return Show.find(:all, :conditions => ["global_id=?", self.global_id])
  end
  
  def connected_show_users(limit=10)
    return User.find(:all, 
      :conditions=>["shows.global_id=?", self.global_id], :include=>:shows)
  end
  
  
  def make_default_global_id
    # only create a default global id if not already set
    if self.global_id == nil
      self.global_id = Digest::SHA1.hexdigest( Time.now.to_s.split(//).sort_by {rand}.join )
    end
  end
  
  def self.top_related(query, user, limit = 20)
    
    # build query 
    sql = 'select *, count(global_id) count 
           from shows s 
           where name like ? 
           group by global_id, name
           order by count desc
           limit ?'
    return Show.find_by_sql( [sql, "%#{query}%", limit])
    
    #right outer join 
  end
  
end
